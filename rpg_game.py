import sqlite3
from prompt_tasks import get_random_task


class RPGPromptMaster:
    DB_FILE = "rpg_save.db"

    def __init__(self):
        self.conn = sqlite3.connect(self.DB_FILE)
        self.cursor = self.conn.cursor()
        self.create_tables()
        self.add_columns_if_not_exist()
        self.defeated_npcs = set()
        self.visited = False
        self.completed = False
        self.xp = 0
        self.rank = "–ù–æ–≤–∞—á–æ–∫"
        self.map = {
            "–õ—ñ—Å": False,
            "–ü–æ—Å–µ–ª–µ–Ω–Ω—è": False,
            "–ì–æ—Ä–∏": False,
            "–§–µ—Ä–º–∞": False,
            "–ü–µ—á–µ—Ä–∞": False,
            "–†—É—ó–Ω–∏": False,
            "–ü–æ—Ä—Ç": False,
            "–ó–∞–º–æ–∫": False,
            "–í–µ–∂–∞ –ú–∞–π—Å—Ç—Ä–∞": False,
        }
        self.allowed_locations = ["–õ—ñ—Å"]
        self.start_game()
    def add_columns_if_not_exist(self):
        self.cursor.execute("PRAGMA table_info(player)")
        columns = [info[1] for info in self.cursor.fetchall()]

        if "visited" not in columns:
            self.cursor.execute("ALTER TABLE player ADD COLUMN visited INTEGER DEFAULT 0")
        if "completed" not in columns:
            self.cursor.execute("ALTER TABLE player ADD COLUMN completed INTEGER DEFAULT 0")
        self.conn.commit()


    def create_tables(self):
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS player (
            xp INTEGER, rank TEXT
        )''')
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS progress (
            npc TEXT, defeated INTEGER
        )''')
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS unlocked (
            location TEXT
        )''')
        self.conn.commit()

    def save_game(self):
        self.cursor.execute('DELETE FROM player')
        self.cursor.execute(
            'INSERT INTO player (xp, rank, visited, completed) VALUES (?, ?, ?, ?)',
            (self.xp, self.rank, int(self.visited), int(self.completed))
        )
        self.cursor.execute('DELETE FROM progress')
        for npc in self.defeated_npcs:
            self.cursor.execute('INSERT INTO progress (npc, defeated) VALUES (?, 1)', (npc,))
        self.cursor.execute('DELETE FROM unlocked')
        for loc in self.allowed_locations:
            self.cursor.execute('INSERT INTO unlocked (location) VALUES (?)', (loc,))
        self.conn.commit()

    def load_game(self):
        self.cursor.execute('SELECT xp, rank, visited, completed FROM player')
        row = self.cursor.fetchone()
        if row:
            self.xp, self.rank, visited, completed = row
            self.visited = bool(visited)
            self.completed = bool(completed)
        self.cursor.execute('SELECT npc FROM progress')
        self.defeated_npcs = set(npc for (npc,) in self.cursor.fetchall())
        self.cursor.execute('SELECT location FROM unlocked')
        self.allowed_locations = [loc for (loc,) in self.cursor.fetchall()] or ["–õ—ñ—Å"]

    def start_game(self):
        self.load_game()

        if self.completed:
            self.show_ending()
            replay = input("–•–æ—á–µ—à –ø—Ä–æ–π—Ç–∏ –≥—Ä—É –∑–Ω–æ–≤—É? (—Ç–∞–∫/–Ω—ñ): ").strip().lower()
            if replay == "—Ç–∞–∫":
                self.reset_game()
            else:
                print("–î—è–∫—É—î–º–æ –∑–∞ –≥—Ä—É! –î–æ –Ω–æ–≤–∏—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π.")
                return

        if not self.visited:
            self.show_intro()
            self.intro_teacher()
            self.visited = True
            self.save_game()

        while True:
            print("\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:")
            print("1. –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞—Ä—Ç—É")
            print("2. –ü–æ–¥–æ—Ä–æ–∂—É–≤–∞—Ç–∏")
            print("3. –í–∏–π—Ç–∏")
            main_choice = input("–í–∞—à –≤–∏–±—ñ—Ä: ")
            if main_choice == "1":
                self.show_map()
            elif main_choice == "2":
                self.show_map()
                command = input("–ö—É–¥–∏ –≤–∏—Ä—É—à–∏—Ç–∏? (–Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É –ª–æ–∫–∞—Ü—ñ—ó –∞–±–æ '–≤–∏—Ö—ñ–¥'): ")
                if command.lower() == "–≤–∏—Ö—ñ–¥":
                    print("–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ, –º–∞–π–±—É—Ç–Ω—ñ–π –õ–µ–≥–µ–Ω–¥–æ –ü—Ä–æ–º–ø—Ç—ñ–≤!")
                    self.save_game()
                    break
                elif command in self.map:
                    if command in self.allowed_locations:
                        self.enter_location(command)
                    else:
                        print(f"–í–∞—Å –Ω–µ –ø—É—Å–∫–∞—é—Ç—å –¥–æ '{command}'. –í–∏ —â–µ –Ω–µ –≥–æ—Ç–æ–≤—ñ.")
                else:
                    print("–¢–∞–∫–æ—ó –ª–æ–∫–∞—Ü—ñ—ó –Ω–µ —ñ—Å–Ω—É—î.")
            elif main_choice == "3":
                print("–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!")
                self.save_game()
                break

    def reset_game(self):
        self.xp = 0
        self.rank = "–ù–æ–≤–∞—á–æ–∫"
        self.visited = False
        self.completed = False
        self.defeated_npcs.clear()
        self.allowed_locations = ["–õ—ñ—Å"]
        self.save_game()
        self.start_game()

    def show_intro(self):
        print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë                   AI PROMPT MASTER RPG                       ‚ïë
‚ïë                                                              ‚ïë
‚ïë           Welcome to the World of Promptia!                  ‚ïë
‚ïë     Train your mind. Defeat vague ideas. Win battles.        ‚ïë
‚ïë               Become a Prompt Legend!                        ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
""")

    def intro_teacher(self):
        print("\n–í—á–∏—Ç–µ–ª—å: –í—ñ—Ç–∞—é, —à—É–∫–∞—á—É –∑–Ω–∞–Ω—å! –°–≤—ñ—Ç –ü—Ä–æ–º–ø—Ç—ñ–≤ —Å–ø–æ–≤–Ω–µ–Ω–∏–π –≤–∏–ø—Ä–æ–±—É–≤–∞–Ω—å.\n")
        print("–©–æ–± —Å—Ç–∞—Ç–∏ –õ–µ–≥–µ–Ω–¥–æ—é –ü—Ä–æ–º–ø—Ç—ñ–≤, —Ç–∏ –º–∞—î—à –ø–æ–¥–æ—Ä–æ–∂—É–≤–∞—Ç–∏ —Ü–∏–º —Å–≤—ñ—Ç–æ–º, –∑—É—Å—Ç—Ä—ñ—á–∞—Ç–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—ñ–≤ —ñ –ø–µ—Ä–µ–º–∞–≥–∞—Ç–∏ –ù–ü–°!")
        print("–û—Å—å –º–∞–ø–∞ —Ç–≤–æ—ó—Ö –ø—Ä–∏–≥–æ–¥. –ü–æ—á–Ω–∏ –∑ –õ—ñ—Å—É. –ó–±–∏—Ä–∞–π –¥–æ—Å–≤—ñ–¥ —ñ –≤—ñ–¥–∫—Ä–∏–≤–∞–π –Ω–æ–≤—ñ –º—ñ—Å—Ü—è!\n")

    def show_map(self):
        print("""
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ïë      –õ—ñ—Å ‚Äî –ü–æ—Å–µ–ª–µ–Ω–Ω—è ‚Äî –ì–æ—Ä–∏               –§–µ—Ä–º–∞ ‚Äî     –†—É—ó–Ω–∏           ‚ïë
‚ïë                     |                          |         |            ‚ïë
‚ïë                –ü–µ—á–µ—Ä–∞                         –ü–æ—Ä—Ç       –ó–∞–º–æ–∫        ‚ïë
‚ïë                       |                                     |         ‚ïë
‚ïë                    –í–µ–∂–∞ –ú–∞–π—Å—Ç—Ä–∞                            ???        ‚ïë
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
""")
        print("=== –°—Ç–∞–Ω –∫–∞—Ä—Ç–∏ ===")
        for location in self.map:
            access = "‚úÖ" if location in self.allowed_locations else "üîí"
            print(f"{access} {location}")
        print(f"\nüîπ –í–∞—à XP: {self.xp} | –†–∞–Ω–≥: {self.rank}")

    def show_ending(self):
        print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                    ‚ïë
‚ïë     üèÜ –í—ñ—Ç–∞—î–º–æ! –í–∏ —Å—Ç–∞–ª–∏ –õ–µ–≥–µ–Ω–¥–æ—é –ü—Ä–æ–º–ø—Ç—ñ–≤! üèÜ                     ‚ïë
‚ïë                                                                    ‚ïë
‚ïë  –í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏ –≤—Å—ñ—Ö NPC, –ø—Ä–æ–π—à–ª–∏ —É—Å—ñ –ø—Ä–∏–≥–æ–¥–∏ –π —Å—Ç–∞–ª–∏ –º–∞–π—Å—Ç—Ä–æ–º!      ‚ïë
‚ïë   –¢–µ–ø–µ—Ä –≤–∞—à—ñ –ø—Ä–æ–º–ø—Ç–∏ ‚Äî –µ—Ç–∞–ª–æ–Ω –¥–ª—è —Ü—ñ–ª–∏—Ö –ø–æ–∫–æ–ª—ñ–Ω—å —à—É–∫–∞—á—ñ–≤ –∑–Ω–∞–Ω—å.    ‚ïë
‚ïë                                                                    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
""")

    def enter_location(self, location):
        print(f"–í–∏ –≤—Ö–æ–¥–∏—Ç–µ –≤ '{location}'...")
        npc_lookup = {
            "–õ—ñ—Å": ("–ü—Ä–æ–º–ø—Ç-–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å", 15),
            "–ü–æ—Å–µ–ª–µ–Ω–Ω—è": ("–ü—Ä–æ–º–ø—Ç-–ú–∞–π—Å—Ç–µ—Ä", 30),
            "–ì–æ—Ä–∏": ("–°–∏–Ω—Ç–∞–∫—Å–∏—Å-–í–∞—Ä—Ç–æ–≤–∏–π", 45),
            "–§–µ—Ä–º–∞": ("–ö–æ–º–∞-–ö–µ–Ω—Ç–∞–≤—Ä", 60),
            "–ü–µ—á–µ—Ä–∞": ("–°–µ–º–∞–Ω—Ç–∏–∫-–¢—ñ–Ω—å", 90),
            "–†—É—ó–Ω–∏": ("–§—Ä–∞–≥–º–µ–Ω—Ç-–î—Ä–µ–≤–Ω—ñ–π", 120),
            "–ü–æ—Ä—Ç": ("–§–æ—Ä–º–∞—Ç-–ù–∞–≤—ñ–≥–∞—Ç–æ—Ä", 180),
            "–ó–∞–º–æ–∫": ("–ê—Ä–≥—É–º–µ–Ω—Ç-–õ–æ—Ä–¥", 240),
            "–í–µ–∂–∞ –ú–∞–π—Å—Ç—Ä–∞": ("–õ–æ—Ä–¥ –ü—Ä–æ–º–ø—Ç—ñ–≤", 270)
        }
        if location in npc_lookup:
            name, xp_value = npc_lookup[location]
            self.npc_battle(name, xp_value)

    def evaluate_prompt(self, prompt):
        score = 0
        feedback = []
        if len(prompt) > 100: score += 2
        else: feedback.append("–ó—Ä–æ–±—ñ—Ç—å –ø—Ä–æ–º–ø—Ç –¥–µ—Ç–∞–ª—å–Ω—ñ—à–∏–º.")
        if any(word in prompt.lower() for word in ["—ñ—Å—Ç–æ—Ä—ñ—è", "–ø–æ—è—Å–Ω–∏", "–≥–µ–Ω–µ—Ä—É–π", "–∫–æ–¥"]):
            score += 2
        else: feedback.append("–î–æ–¥–∞–π—Ç–µ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: —Å—Ç–≤–æ—Ä–∏—Ç–∏, –ø–æ—è—Å–Ω–∏, –ø—Ä–∏–¥—É–º–∞–π).")
        if prompt.endswith("."): score += 1
        else: feedback.append("–ó–∞–≤–µ—Ä—à—ñ—Ç—å –¥—É–º–∫—É –∫—Ä–∞–ø–∫–æ—é.")
        return score, " ".join(feedback) if feedback else "–ß—É–¥–æ–≤–∏–π –ø—Ä–æ–º–ø—Ç!"

    def npc_battle(self, npc_name, npc_xp):
        if npc_name in self.defeated_npcs:
            print(f"üîÅ –í–∏ –≤–∂–µ –ø–µ—Ä–µ–º–æ–≥–ª–∏ {npc_name}. –•–æ—á–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≤–∞–Ω—à –±–µ–∑ –Ω–∞–≥–æ—Ä–æ–¥?")
            choice = input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '—Ç–∞–∫' –¥–ª—è —Ä–µ–≤–∞–Ω—à—É –∞–±–æ '–Ω—ñ' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É: ").strip().lower()
            if choice != "—Ç–∞–∫":
                return
            else:
                npc_xp = 0

        print(f"‚öîÔ∏è {npc_name} –º–∞—î {npc_xp} XP.")
        task = get_random_task()
        print(f"–ó–∞–≤–¥–∞–Ω–Ω—è: {task}")
        prompt = input("–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –±–∏—Ç–≤–∏ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter: ")
        if prompt.strip().lower() == "idk":
            print("üîì –ß–∏—Ç-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –í–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–≥—Ä–∞–ª–∏ –±—ñ–π!")
            user_score = 10
            feedback = "(–ß–∏—Ç-–∫–æ–¥ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π ‚Äî –ø–µ—Ä–µ–º–æ–≥–∞)"
        else:
            user_score, feedback = self.evaluate_prompt(prompt)

        if npc_xp <= 50:
            npc_score = 1
        elif npc_xp <= 100:
            npc_score = 2
        elif npc_xp <= 200:
            npc_score = 3
        elif npc_xp <= 400:
            npc_score = 4
        else:
            npc_score = 5

        print(f"–í–∞—à–∞ –æ—Ü—ñ–Ω–∫–∞: {user_score}, {npc_name}: {npc_score}")

        if user_score >= npc_score:
            print(f"üéâ –í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏ {npc_name} —Ç–∞ –æ—Ç—Ä–∏–º–∞–ª–∏ {npc_xp} XP!")
            if npc_name not in self.defeated_npcs:
                self.defeated_npcs.add(npc_name)
                self.xp += npc_xp
            self.update_rank()
            print(f"üí° –ü–æ—Ä–∞–¥–∞ –¥–ª—è –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—è: {feedback}")
            if self.xp >= 15 and "–ü–æ—Å–µ–ª–µ–Ω–Ω—è" not in self.allowed_locations:
                self.allowed_locations.append("–ü–æ—Å–µ–ª–µ–Ω–Ω—è")
            if self.xp >= 45 and "–ì–æ—Ä–∏" not in self.allowed_locations:
                self.allowed_locations.append("–ì–æ—Ä–∏")
            if self.xp >= 90 and "–§–µ—Ä–º–∞" not in self.allowed_locations:
                self.allowed_locations.append("–§–µ—Ä–º–∞")
            if self.xp >= 150 and "–ü–µ—á–µ—Ä–∞" not in self.allowed_locations:
                self.allowed_locations.append("–ü–µ—á–µ—Ä–∞")
            if self.xp >= 240 and "–†—É—ó–Ω–∏" not in self.allowed_locations:
                self.allowed_locations.append("–†—É—ó–Ω–∏")
            if self.xp >= 360 and "–ü–æ—Ä—Ç" not in self.allowed_locations:
                self.allowed_locations.append("–ü–æ—Ä—Ç")
            if self.xp >= 540 and "–ó–∞–º–æ–∫" not in self.allowed_locations:
                self.allowed_locations.append("–ó–∞–º–æ–∫")
            if self.xp >= 780 and "–í–µ–∂–∞ –ú–∞–π—Å—Ç—Ä–∞" not in self.allowed_locations:
                self.allowed_locations.append("–í–µ–∂–∞ –ú–∞–π—Å—Ç—Ä–∞")
        else:
            print("–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏. –ê–ª–µ –∑–º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ!")
            print(f"üí° –ü–æ—Ä–∞–¥–∞: {feedback}")

    def update_rank(self):
        prev_rank = self.rank
        if len(self.defeated_npcs) == 9:
            self.rank = "–õ–µ–≥–µ–Ω–¥–∞ –ü—Ä–æ–º–ø—Ç—ñ–≤"
        elif self.xp >= 1000:
            self.rank = "–ú–∞–π—Å—Ç–µ—Ä –ü—Ä–æ–º–ø—Ç—ñ–≤"
        elif self.xp >= 500:
            self.rank = "–£—á–µ–Ω—å –ú–∞–π—Å—Ç—Ä–∞"
        elif self.xp >= 200:
            self.rank = "–£—á–µ–Ω—å"
        if self.rank == "–õ–µ–≥–µ–Ω–¥–∞ –ü—Ä–æ–º–ø—Ç—ñ–≤":
            self.completed = True
            self.save_game()
            print("""
            ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
            ‚ïë                                                                    ‚ïë
            ‚ïë     üèÜ –í—ñ—Ç–∞—î–º–æ! –í–∏ —Å—Ç–∞–ª–∏ –õ–µ–≥–µ–Ω–¥–æ—é –ü—Ä–æ–º–ø—Ç—ñ–≤! üèÜ                     ‚ïë
            ‚ïë                                                                    ‚ïë
            ‚ïë  –í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏ –≤—Å—ñ—Ö NPC, –ø—Ä–æ–π—à–ª–∏ —É—Å—ñ –ø—Ä–∏–≥–æ–¥–∏ –π —Å—Ç–∞–ª–∏ –º–∞–π—Å—Ç—Ä–æ–º!      ‚ïë
            ‚ïë   –¢–µ–ø–µ—Ä –≤–∞—à—ñ –ø—Ä–æ–º–ø—Ç–∏ ‚Äî –µ—Ç–∞–ª–æ–Ω –¥–ª—è —Ü—ñ–ª–∏—Ö –ø–æ–∫–æ–ª—ñ–Ω—å —à—É–∫–∞—á—ñ–≤ –∑–Ω–∞–Ω—å.    ‚ïë
            ‚ïë                                                                    ‚ïë
            ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
            """)
            while True:
                choice = input("üîÅ –ë–∞–∂–∞—î—Ç–µ –ø–æ—á–∞—Ç–∏ –≥—Ä—É —Å–ø–æ—á–∞—Ç–∫—É? (—Ç–∞–∫/–Ω—ñ): ").strip().lower()
                if choice == "—Ç–∞–∫":
                    self.__init__()
                    return
                elif choice == "–Ω—ñ":
                    print("üëã –î—è–∫—É—î–º–æ –∑–∞ –≥—Ä—É –≤ AI Prompt Master RPG!")
                    self.save_game()
                    exit()
                else:
                    print("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å '—Ç–∞–∫' –∞–±–æ '–Ω—ñ'.")